version: 2.1

defaults: &defaults
  working_directory: ~/discord-bot
  docker:
    - image: circleci/node:latest

install: &install
  <<: *defaults
  steps:
    - checkout
    - restore_cache:
        keys:
          - v1-discord-bot-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
          - v1-discord-bot-{{ arch }}-{{ .Branch }}
    - run:
        name: Installing Dependencies
        command: npm install
    - save_cache:
        paths:
          - ./node_modules
          - ~/.cache
        key: v1-discord-bot-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
    - persist_to_workspace:
        root: ~/
        paths:
          - discord-bot
          - .cache

lint: &lint
  <<: *defaults
  steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Execute Linters and Scanners
        command: |
          npx audit-ci
          yarn fmt:check
          yarn lint --format junit --output-file test-results/eslint/results.xml
        environment:
          NODE_ENV: production
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: test-results

unit: &unit
  <<: *defaults
  steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Running Unit Tests
        command: |
          yarn jest --ci --maxWorkers=2 --coverage --coverageReporters=text-lcov | npx coveralls
        environment:
          JEST_JUNIT_OUTPUT: test-results/jest/results.xml
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: test-results

e2e: &e2e
  <<: *defaults
  steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Running End-to-End Tests
        command: |
          yarn test:e2e --ci
        environment:
          JEST_JUNIT_OUTPUT: test-results/jest-e2e/results.xml
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: test-results

build: &build
  <<: *defaults
  steps:
    - attach_workspace:
        at: ~/
    - setup_remote_docker
    - run:
        name: Docker Login
        command: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin docker.pkg.github.com
    - run:
        name: Build Docker Image
        command: |
            docker build -t docker.pkg.github.com/fixmyrights/discord-bot/bot:$CIRCLE_SHA1 -f build/node/Dockerfile .
    - run:
        name: Push build
        command: |
            docker push docker.pkg.github.com/fixmyrights/discord-bot/bot:$CIRCLE_SHA1
            docker push docker.pkg.github.com/fixmyrights/discord-bot/bot:latest

jobs:
  install:
    <<: *install
  lint:
    <<: *lint
  unit:
    <<: *unit
  e2e:
    <<: *e2e
  build:
    <<: *build

workflows:
  version: 2
  discord_bot:
    jobs:
      - install
      - lint:
          requires:
            - install
      - unit:
          requires:
            - install
      - e2e:
          requires:
            - install
      - build:
          filters:
            branches:
              only: master
          requires:
            - lint
            - unit
            - e2e
